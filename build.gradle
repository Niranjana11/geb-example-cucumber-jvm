import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.commons.io.FileUtils

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath "com.github.samueltbrown:gradle-cucumber-plugin:0.7"

		// if you use the version of cucumber-jvm that the plugin was built with
		// (1.1.6 for version 0.7), the line below is unnecessary
		classpath "info.cukes:cucumber-core:1.1.8"

        classpath "commons-io:commons-io:2.4"
	}
}

apply plugin: "java"
apply plugin: "groovy"
apply plugin: "idea"
apply from: "gradle/idea.gradle"
apply plugin: "com.github.samueltbrown.cucumber"

repositories {
	jcenter()
}

ext {
	groovyVersion = '2.3.6'
	gebVersion = '0.9.3'
	seleniumVersion = '2.42.2'
	cucumberJvmVersion = '1.1.8'
}

dependencies {
	testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
	testCompile "org.gebish:geb-core:$gebVersion"
	testCompile "org.seleniumhq.selenium:selenium-api:$seleniumVersion"

	testCompile "info.cukes:cucumber-core:$cucumberJvmVersion"
	testCompile "info.cukes:cucumber-groovy:$cucumberJvmVersion"

	// this supplies some pre-built cucumber steps for driving Geb,
	// see https://github.com/tomdcc/geb-cucumber
	testCompile "io.jdev.geb:geb-cucumber:0.2"

	// pick whichever drivers you want. We test against most of them here.
	// see src/test/resources/GebConfig.groovy for how to switch between them
	cucumberRuntime "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
	cucumberRuntime "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
	cucumberRuntime("com.github.detro.ghostdriver:phantomjsdriver:1.1.0") {
		// phantomjs driver pulls in a different selenium version
		transitive = false
	}
}

task downloadChromeDriver {
    ext {
        chromeDriverVersion = "2.10"
    }
    def outputFile = file("gradle/webdriver/chromedriver.zip")
    outputs.file(outputFile)

    doLast {
        def driverOsFilenamePart
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            driverOsFilenamePart = "win32"
        } else if (Os.isFamily(Os.FAMILY_MAC)) {
            driverOsFilenamePart = "mac32"
        } else if (Os.isFamily(Os.FAMILY_UNIX)) {
            driverOsFilenamePart = Os.isArch("amd64") ? "linux64" : "linux32"
        }
        FileUtils.copyURLToFile(new URL("http://chromedriver.storage.googleapis.com/${chromeDriverVersion}/chromedriver_${driverOsFilenamePart}.zip"), outputFile)
    }

}

task unzipChromeDriver(type: Copy) {
    def outputDir = file("gradle/webdriver/chromedriver")
    dependsOn downloadChromeDriver
    outputs.dir(outputDir)

    from(zipTree(downloadChromeDriver.outputs.files.singleFile))
    into(outputDir)
}

task downloadPhantomJs {
    def outputFile = file("gradle/webdriver/phantomjs.zip")
    outputs.file(outputFile)

    doLast {
        def osFilenamePart
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            osFilenamePart = "windows.zip"
        } else if (Os.isFamily(Os.FAMILY_MAC)) {
            osFilenamePart = "macosx.zip"
        } else if (Os.isFamily(Os.FAMILY_UNIX)) {
            osFilenamePart = Os.isArch("amd64") ? "linux-x86_64.tar.bz2" : "linux-i686.tar.bz2"
        }
        FileUtils.copyURLToFile(new URL("https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-1.9.7-${osFilenamePart}"), outputFile)
    }

}

task unzipPhantomJs(type: Copy) {
    def outputDir = file("gradle/webdriver/phantomjs")
    dependsOn downloadPhantomJs
    outputs.dir(outputDir)

    def archive = downloadPhantomJs.outputs.files.singleFile

    from(Os.isFamily(Os.FAMILY_MAC) || Os.isFamily(Os.FAMILY_WINDOWS) ? zipTree(archive) : tarTree(archive))
    into(outputDir)
    eachFile { FileCopyDetails fcp ->
        fcp.relativePath = new RelativePath(!fcp.directory, *fcp.relativePath.segments[1..-1])
    }
}

cucumber {
    formats = [
		'pretty', // prints nice format out to the console
		'html:build/reports/cucumber', // html
		'junit:build/cucumber.xml' // junit format for integration with CI tool etc
	]
	// src/cucumber/resources is included automatically
	glueDirs = [
		"classpath:io.jdev.geb.cucumber.steps.groovy.en"
	]
}

tasks.cucumber {
    dependsOn unzipChromeDriver, unzipPhantomJs

    doFirst {
        def chromedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
        System.setProperty("webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, chromedriverFilename).absolutePath)
        def phantomJsFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "phantomjs.exe" : "bin/phantomjs"
        System.setProperty("phantomjs.binary.path", new File(unzipPhantomJs.outputs.files.singleFile, phantomJsFilename).absolutePath)
    }
}
